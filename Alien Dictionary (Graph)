package com.company;// { Driver Code Starts
import java.io.*;
import java.util.*;
import java.math.*;
class Main {
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = Integer.parseInt(sc.next());
        while(t-- > 0)
        {
            int n = Integer.parseInt(sc.next());
            int k = Integer.parseInt(sc.next());

            String[] words = new String[n];

            for(int i=0;i<n;i++)
            {
                words[i] = sc.next();
            }

            Solution ob = new Solution();
            //  System.out.println(T.findOrder(words,k));
            String order = ob.findOrder(words,n,k);
            if(order.length() == 0){
                System.out.println(0);
                continue;
            }
            String temp[] = new String[n];
            for(int i=0;i<n;i++)
                temp[i] = words[i];

            Arrays.sort(temp, new Comparator<String>(){

                @Override
                public int compare(String a, String b) {
                    int index1 = 0;
                    int index2 = 0;
                    for(int i = 0; i < Math.min(a.length(), b.length())
                            && index1 == index2; i++) {
                        index1 = order.indexOf(a.charAt(i));
                        index2 = order.indexOf(b.charAt(i));
                    }

                    if(index1 == index2 && a.length() != b.length())
                    {
                        if(a.length() < b.length())
                            return 1;
                        else
                            return 0;
                    }

                    if(index1 < index2)
                        return 1;
                    else
                        return 0;

                }
            });

            int flag = 1;
            for(int i=0;i<n;i++)
            {
                if(!words[i].equals(temp[i]))
                {
                    flag = 0;
                    break;
                }
            }

            System.out.println(flag);
        }
    }

}
// } Driver Code Ends

class Solution
{
    ArrayList<ArrayList<Integer>> adj;
    String order;
    Stack<Integer> st;
    boolean[] visited;

    public String findOrder(String [] dict, int N, int K) {
        if (K == 1) {
            return "a"; //k==1 means in a normal dictionary first letter (i.e a), read K definition in this ques
        }
        adj = new ArrayList<>();
        order = "";

        for (int i = 0; i < K; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < N - 1; i++) { //It will run N-1 times because at a time we compare 2 words, for eg 1&2 then,2&3,3&4,4&5 ,so in this way(eg:n==5), it will run 4 times.
            String word1 = dict[i];      //dictionary ka 1st word
            String word2 = dict[i + 1];  //dictionary ka 2nd word

            for (int j = 0; j < Integer.min(word1.length(), word2.length()); j++) {
                if (word1.charAt(j) != word2.charAt(j)) {
                    adj.get(word1.charAt(j) - 'a').add(word2.charAt(j) - 'a');   // If we find a mismatching character, then add an edge from character of word1 to that of word2
                    //this above line is basically topological sorting
                    //doing this using ascii value eg: a-a=0,b-a=1
                }
            }
        }
        visited = new boolean[K];
        Arrays.fill(visited, false);
        st = new Stack<>();

        for (int i = 0; i < K; i++) {
            if (!visited[i]) {
                dfs(i);
            }
        }

        while(!st.isEmpty()){
            order+=(char) (st.pop()+'a');     //here we will get for eg: 0, then it will be 0+a=a,1+a=b, similarly others (In Java, char is a numeric type)
        }
        return order;
    }

    void dfs(int v) {
        visited[v]=true;
        for(int u: adj.get(v)) {
            if(!visited[u]){
                dfs(u);
            }
            st.push(v);

        }



    }
}










